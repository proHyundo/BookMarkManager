buildscript {
	ext {
		restdocsApiSpecVersion = '0.16.4'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	//restdocs-api-spec → restdocs extension  포함함
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"

	//swagger generator 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.hyun'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/* SpringBoot */
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/* Lombok */
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	/* Database */
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.2'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.3.0'

	/* Log4JDBC */
	testImplementation group: 'org.bgee.log4jdbc-log4j2', name:'log4jdbc-log4j2-jdbc4.1', version: '1.16'

	/* SpringSecurity */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	/* Jwt */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	/* Gson */
	implementation 'com.google.code.gson:gson'

	/* Validation */
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	/* RestDocs */
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

	/* Swagger */
//	implementation "io.springfox:springfox-boot-starter:3.0.0"
//	implementation "io.springfox:springfox-swagger-ui:3.0.0"

	/* Email */
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	/* Properties */
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Task 및 설정 추가
// GenerateSwaggerUI 태스크가, openapi3 task 를 의존하도록 설정
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	//기존 파일 삭제했다가, build 에 출력한 json 정적파일 복사 (안해도 됨 → local 확인용)
	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"

	}
}

//openAPI 작성 자동화를 위해 패키징 전에 openapi3 테스크 선실행을 유발
bootJar{
	dependsOn(':openapi3')
}

openapi3 {
	def Properties properties = new Properties()
	InputStream inputStream = new FileInputStream(project.rootProject.file('src/main/resources/application.yml'))
	server = properties.getProperty("property.doc.docUrl", "http://localhost:9090")
	title = "Bookmark-tool API Documentation"
	description = "Spring REST Docs with SwaggerUI. \n" +
			"Deploy URL : https://bookmark-tool.com \n" +
			"Github URL : https://https://github.com/proHyundo/BookMarkManager"
	version = "0.0.1"
	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'json'

	// /static/docs/open-api-3.0.1.json 생성 → jar 파일만 배포할 예정이기에 build 에 출력
	outputDirectory = 'build/resources/main/static/docs'
}