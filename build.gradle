buildscript {
	ext {
		restdocsApiSpecVersion = '0.16.4'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	//restdocs-api-spec → restdocs extension  포함함
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	//swagger generator 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.hyun'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/* SpringBoot */
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/* Lombok */
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	/* Database */
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.2'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.3.0'

	/* Log4JDBC */
	testImplementation group: 'org.bgee.log4jdbc-log4j2', name:'log4jdbc-log4j2-jdbc4.1', version: '1.16'

	/* SpringSecurity */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	/* Jwt */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	/* Gson */
	implementation 'com.google.code.gson:gson'

	/* Validation */
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	/* RestDocs + Swagger */
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'

	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
	swaggerUI 'org.webjars:swagger-ui:4.11.1'


	/* Email */
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	/* Properties */
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.named('test') {
	useJUnitPlatform()
}

swaggerSources{
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

openapi3 {
	server = "https://bookmark-tool.com"
	title = "Bookmark-tool API Documentation"
	description = "Spring REST Docs with SwaggerUI. </br>" +
			"Deploy URL : <a href='https://bookmark-tool.com' target='_blank' rel='noopener noreferrer'>https://bookmark-tool.com</a> </br>" +
			"Github URL : <a href='https://https://github.com/proHyundo/BookMarkManager' target='_blank' rel='noopener noreferrer'>https://https://github.com/proHyundo/BookMarkManager</a>"
	version = "0.0.1"
	format = 'yaml'

}


tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

}

// 생성된 SwaggerUI 를 jar 에 포함시키기 위해 build/resources 경로로 로 복사
tasks.register('copySwaggerUI', Copy) {
	dependsOn 'generateSwaggerUISample'

	def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

	from("${generateSwaggerUISampleTask.outputDir}")
	into("${project.buildDir}/resources/main/static/docs")

	from ("${project.buildDir}/api-spec/openapi3.yaml")
	into ("${project.buildDir}/resources/main/static/docs/")

}

// bootJar 실행 전, copySwaggerUI 를 실행하도록 설정
bootJar {
	dependsOn 'copySwaggerUI'

}
