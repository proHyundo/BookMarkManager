name: SpringBoot CICD with Gradle version 1.4.2 24-01-02
# Add MariaDB for Springboot Test

on:
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/github-actions-server.yaml'

permissions:
  contents: read

jobs:
  springboot-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
            java-version: 11
            distribution: 'temurin'

      # Shutdown the Default MySQL
      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop

      # MariaDB for Springboot Test - getong/mariadb-action@v1.1
      - name: Set up MariaDB
        uses: getong/mariadb-action@v1.1
        with:
          host port: 3306
          container port: 3306
          mariadb version: '10.6'
          mysql database: 'bookmarkshare-test'
          mysql root password: ${{ secrets.MARIADB_ROOT_PASSWORD }}

#      - name: Set up MariaDB
#      - uses: actions/checkout@v4
#      - uses: shogo82148/actions-setup-mysql@v1
#        with:
#          distribution: "mariadb"
#          mysql-version: "10.6"
#          root-password: ${{ secrets.MARIADB_ROOT_PASSWORD }}

      # Create application.properties
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yml
      - run: echo -e "${{secrets.APPLICATION}}" | base64 --decode > ./src/main/resources/application.yml
      - uses: actions/upload-artifact@v3
        with:
          name: application.yml
          path: ./src/main/resources/application.yml
          retention-days: 1

      # Create application.properties for test
      - uses: actions/checkout@v3
      - run: touch ./src/test/resources/application.properties
      - run: echo -e "${{secrets.APPLICATION_TEST}}" | base64 --decode > ./src/test/resources/application.properties
      - uses: actions/upload-artifact@v3
        with:
          name: application.properties
          path: ./src/test/resources/application.properties
          retention-days: 1

      # Create data.sql for test
      - uses: actions/checkout@v3
      - run: touch ./src/test/resources/data.sql
      - run: echo -e "${{secrets.DATA_SQL}}" | base64 --decode > ./src/test/resources/data.sql
      - uses: actions/upload-artifact@v3
        with:
          name: data.sql
          path: ./src/test/resources/data.sql
          retention-days: 1

      # Create schema-mariadb-init.sql for test
      - uses: actions/checkout@v3
      - run: touch ./src/test/resources/schema-mariadb-init.sql
      - run: echo -e "${{secrets.INIT_SQL}}" | base64 --decode > ./src/test/resources/schema-mariadb-init.sql
      - uses: actions/upload-artifact@v3
        with:
          name: schema-mariadb-init.sql
          path: ./src/test/resources/schema-mariadb-init.sql
          retention-days: 1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

#      - name: Execute Gradle build
#        run: ./gradlew clean build -x test

      - name: Execute Gradle build
        run: ./gradlew clean build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build SpringBoot Image And Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-server-image:latest
          no-cache: true

#      - name : Build NginX Image And Push
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          file: Dockerfile-nginx
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-nginx-image:latest
#          no-cache: true

      - name: Copy docker-compose.yml to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM_HOST_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "docker-compose.yaml"
          target: "/home/ubuntu"

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            if [ "$(docker ps -q --filter name=server)" ]; then
              sudo docker rm -f $(docker ps -q --filter name=server)
              sudo docker rmi $(docker images -q --filter reference=bookmark-server-image)
            fi
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-server-image
            sudo docker compose -f /home/ubuntu/docker-compose.yaml up -d server
            docker image prune -a -f
#          script: |
#            if [ "$(docker ps -qa)" ]; then
#              sudo docker rm -f $(docker ps -qa)
#              sudo docker rmi $(docker images -q)
#            fi
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/bookmark-server-image
#            sudo docker compose -f /home/ubuntu/docker-compose.yaml up -d --force-recreate
#            docker image prune -a -f

      - name: Send Github Actions Result to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action Test
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
