name: SpringBoot CICD with Gradle version 1.0.0

on:
  pull_request:
    branches: [ "main" ]
    types:
        - closed
    paths:
#      - 'src/**'
      - ${{secrets.ACTIONS_PATH_RESTRICT}}

jobs:
  if_not_merge_trigger:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "This is not normal merged pull request. Do nothing. Bye."

  springboot-build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@3

      # JDK 11 설정 및 캐싱
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
            java-version: 11
            distribution: 'temurin'

      # application.properties 파일 생성
      - name: Create application.properties
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{secrets.APPLICATION}}" > ./src/main/resources/application.properties
      - uses: actions/upload-artifact@v3
        with:
          name: application.properties
          path: ./src/main/resources/application.properties
          retention-days: 1

      # Build with Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew clean build -x test
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
#        with:
#          arguments: build

      # Docker Buildx : 타 플랫폼 호환 빌드
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub Login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # SpringBoot Docker Image 생성 및 Docker Hub 에 Push
      - name: Build SpringBoot Image And Push
        uses: docker/build-push-action@v4
        with:
          context: . # Dockerfile 이 있는 깃허브 경로 명시하지 않을 경우 default 는 root
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-server-image:latest # DockerHub 에 push 할 때의 태그

      # NginX Docker Image 생성 및 Docker Hub 에 Push
      - name : Build NginX Image And Push
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-nginx-image:latest

      # docker-compose 파일 VM 으로 복사
      - name: Copy docker-compose.yml to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_HOST_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "/github/workspace/docker-compose.yaml"
          target: "/home/${{ secrets.VM_USERNAME }}"

      # VM 접속 후 Docker Image Pull & Docker Compose 실행
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ubuntu # 계정 생성 않고 기본으로 있느 ubuntu 써도 되고 생성했고 숨기고 싶으면 위에처럼 secret 으로 빼도 된다.
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # 만약 실행중인 컨테이너가 있다면 모두 삭제.
          script: |
            if [ "$(docker ps -qa)" ]; then
              sudo docker rm -f $(docker ps -qa)
            fi
            sudo docker pull ${{ secrets.DOCKER_REPO }}/bookmark-server-image
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/bookmark-web-image
            sudo docker pull ${{ secrets.DOCKER_REPO }}/bookmark-nginx-image
            sudo docker-compose -f /home/ubuntu/github/workspace/docker-compose.yaml up -d
            docker image prune -f

      # Actions 결과 Slack 알림
      - name: Send Github Actions Result to Slack
          uses: 8398a7/action-slack@v3
          with:
            status: ${{ job.status }}
            author_name: Github Action Test
            fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          if: always()